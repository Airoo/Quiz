Системная библиотека
Вопрос № 1
<
Какие требования предъявляются к методу equals:
>
x	Для любых не null x – x.equals(null) возвращает false
x	Для любых x и y не равных null, если x.equals(у) возвращает true, то x.hashCode() равен y.hashCode()
-	Если x.hashCode() и y.hashCode() равны, то x.equals(у) должно быть true
x	Для любых не null x – x.equals(x) возвращает true
-	Если x равно null - x.equals(null) возвращает true
!рефлексивность x.equals(x)=true
симметричность x.equals(y)=true, y.equals(x)=true
транзитивность x.equals(z)=true, y.equals(z)=true, x.equals(y)=true
непротиворечивость x.equals(x)=true постоянно
x.equals(null)=false

Вопрос № 2
<
Для чего используется класс Class?
>
x	Для создания объектов данного класса
x	Для получения списка аннотаций у данного класса
-	Для управления памятью, выделяемой для объекта данного класса
x	Для получения полей и методов класса
-	Для динамической загрузки классов во время выполнения

Вопрос № 3
<
В каких случаях нужно использовать аннотацию @Override?
>
-	Обязательно при перегрузке метода
-	Всегда при переопределении класса
-	Всегда при переопределении метода
x	Желательно при переопределении метода
-	Желательно при переопределенни класса
-	Желательно при перегрузке метода
!@Overide не является обязательной

Вопрос № 10
<
Пусть есть класс, описывающий человека:

public class Person{
//дата рождения
private Date dateOfBirth;

//возраст
private int age;
//полное имя
private String fullName;

//компания в которой человек работает
private String workInCompany;
}
Какие поля следует включить в вычисления hashCode() и equals()?
>
x	dateOfBirth
-	workInCompany
-	age
x	fullName

Вопрос № 3
<
Пусть есть классы
class Car {
int size;
String color = “black”;

public Car(int size) {
this.size = size;
}
}
и
class MiniCar extends Car { }
Каким образом можно определить конструктор без параметров в классе MiniCar, если мы хотим, чтобы размер машины по умолчанию был 5, а цвет – красный (отметьте все возможные варианты)?
>
x	public MiniCar() {
this.color = “red”;
this(5);
}
-	public MiniCar() {
this.color = “red”;
super(5);
}
-	public MiniCar() {
super(5);
this.color = “red”;
}
-	public MiniCar() {
this(5);
this.color = “red”;
}



